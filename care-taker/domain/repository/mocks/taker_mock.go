// Code generated by MockGen. DO NOT EDIT.
// Source: taker.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/markonesgava/take-care/care-taker/domain/entities"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockTakerRepository is a mock of TakerRepository interface
type MockTakerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTakerRepositoryMockRecorder
}

// MockTakerRepositoryMockRecorder is the mock recorder for MockTakerRepository
type MockTakerRepositoryMockRecorder struct {
	mock *MockTakerRepository
}

// NewMockTakerRepository creates a new mock instance
func NewMockTakerRepository(ctrl *gomock.Controller) *MockTakerRepository {
	mock := &MockTakerRepository{ctrl: ctrl}
	mock.recorder = &MockTakerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTakerRepository) EXPECT() *MockTakerRepositoryMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockTakerRepository) GetOne(id primitive.ObjectID) (*entities.Taker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(*entities.Taker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockTakerRepositoryMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockTakerRepository)(nil).GetOne), id)
}

// GetAll mocks base method
func (m *MockTakerRepository) GetAll() ([]*entities.Taker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Taker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTakerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTakerRepository)(nil).GetAll))
}

// Add mocks base method
func (m *MockTakerRepository) Add(entity *entities.Taker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockTakerRepositoryMockRecorder) Add(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTakerRepository)(nil).Add), entity)
}

// Update mocks base method
func (m *MockTakerRepository) Update(id primitive.ObjectID, entity *entities.Taker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTakerRepositoryMockRecorder) Update(id, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTakerRepository)(nil).Update), id, entity)
}
